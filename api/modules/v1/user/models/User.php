<?php

namespace api\modules\v1\User\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Query;
use yii\web\IdentityInterface;
use yii2tech\ar\softdelete\SoftDeleteBehavior;

class User extends ActiveRecord implements IdentityInterface
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    public function fields()
    {
        return ['id', 'username', 'email', 'created_at', 'updated_at'];
    }

    public function extraFields()
    {
        return ['auth_key', 'access_token', 'verification_token', 'isDeleted'];
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                'value' => function () {
                    return Yii::$app->formatter->asDatetime(time(), 'php:Y-m-d H:i:s');
                },
            ],
            'softDeleteBehavior' => [
                'class' => SoftDeleteBehavior::className(),
                'softDeleteAttributeValues' => [
                    'isDeleted' => true
                ],
                'replaceRegularDelete' => true // mutate native `delete()` method
            ],

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'email', 'password'], 'required'],
            [['username', 'email', 'password'], 'string', 'max' => 255],
            [['username', 'email'], 'unique'],
            ['email', 'email'],
            [['username', 'email'], 'uniqueWithDeleted'],
        ];
    }

    public function uniqueWithDeleted($attribute, $params)
    {
        $query = new Query();
        $exists = $query->from($this->tableName())
            ->where([$attribute => $this->$attribute, 'isDeleted' => 1])
            ->exists();

        if ($exists) {
            $this->addError($attribute, $attribute . " \"" . Yii::$app->request->post($attribute) . " \"" . ' has already been taken.');
        }
    }

    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    public function getAccessToken()
    {
        return $this->access_token;
    }

    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    public function setPasswordHash($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    public function generateAccessToken()
    {
        $this->access_token = Yii::$app->security->generateRandomString();
    }

    public static function find()
    {
        return parent::find()->where(['isDeleted' => null]);
    }

    public function beforeSave($insert)
    {
        if (Yii::$app->request->post('password')) {
            $this->setPasswordHash(Yii::$app->request->post('password'));
        }
        if (parent::beforeSave($insert)) {
            $this->generateAuthKey();
            $this->generateAccessToken();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
